package com.movie.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.movie.model.BoardBean;
import com.movie.model.BoardDaoInter;
import com.movie.model.BoardDto;

@Controller
public class BoardController {
	@Autowired
	private BoardDaoInter inter;
	
	@RequestMapping("command")
	public BoardBean formBack(){
		return new BoardBean();
	}
	
	//전체자료
	@RequestMapping("boardList")
	public ModelAndView listProcess(@RequestParam(value="page", defaultValue="1") String page , @RequestParam(value="list", defaultValue="10") String list){		
		int pageNum = 1; //하단 페이지 수
		int pageList = 10; //1페이지에 보여질 게시글 수
		int b_pageList = 10; //1블럭에 보여질 페이지 수;
		int block = 1; //블럭 수
		//하단 페이지수
		try{
			pageNum = Integer.parseInt(page);
		}catch(Exception e){
			pageNum = 1; //parameter page값이 제대로 안들어오면 1;
		}
		if(pageNum <= 0) pageNum = 1; //parameter page값 이상한값 들어오면 1;
		// /하단 페이지수

		// 게시글수
		try{
			pageList = Integer.parseInt(list);
		}catch(Exception e){
			pageList = 10; //parameter pageList값이 제대로 안들어오면 1;
		}
		if(pageList <= 0) pageList = 1; //parameter pageList값 이상한값 들어오면 1;
		// /게시글수
		
		block = (int)Math.ceil((double)pageNum/b_pageList); // 계산된 블럭수

		int b_start_page = ((block-1) * b_pageList) + 1; //현재 블럭에서 시작 페이지 번호;
		int b_end_page = b_start_page + b_pageList - 1; //현재 블럭에서 마지막 페이지 번호;

		int totalPage = (int)Math.ceil((double)inter.totalCount()/pageList); //총 페이지 = 게시글의 총갯수 / 1뷰에 보여질 게시글 수;
		if (b_end_page > totalPage) b_end_page = totalPage; //총 페이지수가 15인데 블럭 2개 만들어지면 마지막 페이지가 20이므로 공백 페이지가 생겼을때 처리;

		int totalBlock = (int)Math.ceil((double)totalPage/b_pageList); //총 블럭수 = 총 페이지 갯수 / 블럭에 나타날 페이지 수

		//DB limit (db는 시작페이지가 0);
		int pageChoice = (pageNum - 1) * pageList; //
		
		Map<String, Integer> map = new HashMap();
		map.put("pageChoice", pageChoice);
		map.put("pageList", pageList);
		
		List<BoardDto> boardlist = inter.selectDataAll(map);
		
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("board/boardList");
		modelAndView.addObject("list", boardlist);
		modelAndView.addObject("pageNum", pageNum);
		modelAndView.addObject("pageList", pageList);
		modelAndView.addObject("block", block);
		modelAndView.addObject("b_start_page", b_start_page);
		modelAndView.addObject("b_end_page", b_end_page);
		modelAndView.addObject("totalPage", totalPage);
		modelAndView.addObject("totalBlock", totalBlock);
		return modelAndView;
	}
	
	//선택자료
	@RequestMapping("boardDetail")
	public ModelAndView detailProcess(@RequestParam("b_no") String b_no){
		BoardDto dto = inter.selectPart(b_no);
		return new ModelAndView("board/boarddetail", "dto", dto);
	}
	
	//검색
	@RequestMapping("boardSearch")
	public ModelAndView searchProcess(@RequestParam("stype") String stype, @RequestParam("sword") String sword, @RequestParam(value="page", defaultValue="1") String page , @RequestParam(value="list", defaultValue="10") String list){		
		int pageNum = 1; //하단 페이지 수
		int pageList = 10; //1페이지에 보여질 게시글 수
		int b_pageList = 10; //1블럭에 보여질 페이지 수;
		int block = 1; //블럭 수
		//하단 페이지수
		try{
			pageNum = Integer.parseInt(page);
		}catch(Exception e){
			pageNum = 1; //parameter page값이 제대로 안들어오면 1;
		}
		if(pageNum <= 0) pageNum = 1; //parameter page값 이상한값 들어오면 1;
		// /하단 페이지수

		// 게시글수
		try{
			pageList = Integer.parseInt(list);
		}catch(Exception e){
			pageList = 10; //parameter pageList값이 제대로 안들어오면 1;
		}
		if(pageList <= 0) pageList = 1; //parameter pageList값 이상한값 들어오면 1;
		// /게시글수
		
		block = (int)Math.ceil((double)pageNum/b_pageList); // 계산된 블럭수

		int b_start_page = ((block-1) * b_pageList) + 1; //현재 블럭에서 시작 페이지 번호;
		int b_end_page = b_start_page + b_pageList - 1; //현재 블럭에서 마지막 페이지 번호;

		int totalPage = (int)Math.ceil((double)inter.totalCount()/pageList); //총 페이지 = 게시글의 총갯수 / 1뷰에 보여질 게시글 수;
		if (b_end_page > totalPage) b_end_page = totalPage; //총 페이지수가 15인데 블럭 2개 만들어지면 마지막 페이지가 20이므로 공백 페이지가 생겼을때 처리;

		int totalBlock = (int)Math.ceil((double)totalPage/b_pageList); //총 블럭수 = 총 페이지 갯수 / 블럭에 나타날 페이지 수

		//DB limit (db는 시작페이지가 0);
		int pageChoice = (pageNum - 1) * pageList; //
		
		Map<String, String> map = new HashMap();
		map.put("pageChoice", String.valueOf(pageChoice));
		map.put("pageList", String.valueOf(pageList));
		map.put("stype", stype);
		map.put("pageList", sword);
		
		ModelAndView modelAndView = new ModelAndView();
		List<BoardDto> boardlist = inter.selectSearchData(map);
		
		modelAndView.setViewName("board/boardList");
		modelAndView.addObject("list", boardlist);
		modelAndView.addObject("pageNum", pageNum);
		modelAndView.addObject("pageList", pageList);
		modelAndView.addObject("block", block);
		modelAndView.addObject("b_start_page", b_start_page);
		modelAndView.addObject("b_end_page", b_end_page);
		modelAndView.addObject("totalPage", totalPage);
		modelAndView.addObject("totalBlock", totalBlock);
		return modelAndView;
	}
	
/*	
	//새글등록
	@RequestMapping(value="boardwrite", method=RequestMethod.GET)
	public ModelAndView writeProcess(BoardBean bean){
		ModelAndView modelAndView = new ModelAndView();
		int count = 1;
		try {
			count = inter.b_noMax() + 1;
		} catch (Exception e) {
			count = 1;
		}
		modelAndView.setViewName("board/boardwform");
		modelAndView.addObject("count", count);
		return modelAndView; //뷰네임 
	}
	
	//새글등록완료
	@RequestMapping(value="boardwrite", method=RequestMethod.POST)
	public String writeSubmit(BoardBean bean){
		boolean b = false;
		try {
			b = inter.insertData(bean);
		} catch (Exception e) {
			// TODO: handle exception
		}
		if(b)
			return "redirect:/boardlist";
		else
			return "redirect:/error.jsp";
	}

	//업데이트
	@RequestMapping(value="boardupdate", method=RequestMethod.GET)
	public ModelAndView updateProcess(BoardBean bean){
		ModelAndView modelAndView = new ModelAndView();
		int b = inter.checkPass(bean);
		if(b > 0){
			BoardDto dto = inter.selectPart(bean.getNum());
			modelAndView.setViewName("board/boardupform");
			modelAndView.addObject("dto", dto);
		}else{
			modelAndView.setViewName("redirect:/boarddetail?num="+bean.getNum());
		}
		return modelAndView; //뷰네임 
	}
	
	//업데이트완료
	@RequestMapping(value="boardupdate", method=RequestMethod.POST)
	public String updateSubmit(BoardBean bean){
		if(inter.updateData(bean))
			return "redirect:/boardlist";
		else
			return "redirect:/error.jsp";
	}
	
	//삭제
	@RequestMapping("boarddelete")
	public String delteSubmit(@RequestParam("b_no") String b_no){
		int b = inter.checkPass(bean);
		System.out.println(b);
		if(b > 0){
			if(inter.deleteData(bean.getNum())){
				return "redirect:/boardlist";			
			}else{
				return "redirect:/error.jsp";			
			}
		}else{	
			return "redirect:/boarddetail?num="+bean.getNum();
		}
	}
*/

}
